{"version":3,"sources":["Components/TodoCard.js","Components/AllTodos.js","Components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["TodoCard","todo","id","title","completed","history","useHistory","style","backgroundColor","margin","padding","width","borderRadius","onClick","push","AllTodos","useState","undefined","todos","setTodos","useEffect","axios","get","then","res","responseTodos","data","console","log","className","display","flexWrap","justifyContent","map","CircularProgress","Todo","useParams","task","setTask","response","color","App","exact","path","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAuBeA,EAtBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAAyBD,EAAzBC,GAAIC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UACfC,EAAUC,cACd,OAEE,sBACEC,MAAO,CACLC,gBAAiB,OACjBC,OAAQ,OACRC,QAAS,OACTC,MAAO,QACPC,aAAc,QAEhBC,QAAS,kBAAMR,EAAQS,KAAR,WAAiBZ,KARlC,UAUE,uCACA,6BAAKC,IACL,kDAAmBC,SCmBVW,EA/BE,WACf,MAA0BC,wBAASC,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KASA,OARAC,qBAAU,WACRC,IAAMC,IAAN,8CAAwDC,MAAK,SAACC,GAC5D,IAAMC,EAAgBD,EAAIE,KAC1BP,EAASM,QAEV,IACHL,qBAAU,kBAAMO,QAAQC,IAAIV,KAAQ,CAACA,IAE7BA,EAGN,sBAAKW,UAAU,WAAf,UACE,iDACA,qBACEA,UAAU,gBACVtB,MAAO,CACLuB,QAAS,OACTC,SAAU,OACVC,eAAe,UALnB,SAQGd,EAAMe,KAAI,SAAChC,GAAD,OACT,cAAC,EAAD,CAAUA,KAAMA,GAAaA,EAAKC,YAbxC,cAACgC,EAAA,EAAD,KCuBWC,EAnCF,WACX,IAAQjC,EAAOkC,cAAPlC,GACR,EAAwBc,wBAASC,GAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAA6BD,GAAQ,GAA7BlC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAcf,OAbAgB,qBAAU,WACRC,IACGC,IADH,qDACqDpB,IAClDqB,MAAK,SAACC,GACL,IAAMe,EAAWf,EAAIE,KACrBY,EAAQC,QAEX,CAACrC,IAEJkB,qBAAU,WACRO,QAAQC,IAAIS,KACX,CAACA,IAEIA,EAGN,qBACE9B,MAEGH,EAEG,CAAEoC,MAAO,QAAShC,gBAAiB,aADnC,CAAEgC,MAAO,MAAOhC,gBAAiB,QAJzC,SAQE,4CACaL,EADb,SAC2BC,EAAoB,GAAR,MADvC,uBAVF,cAAC8B,EAAA,EAAD,K,QCNWO,MAbf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAM,IAAIC,SAAY,cAAC,EAAD,MACnC,cAAC,IAAD,CAAOD,KAAM,OAAOC,SAAY,cAAC,EAAD,cCE3BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.55ea1e4a.chunk.js","sourcesContent":["import { useHistory } from \"react-router\";\nconst TodoCard = ({ todo }) => {\n  const { id, title, completed } = todo;\n  let history = useHistory();\n  return (\n          \n    <div\n      style={{\n        backgroundColor: \"grey\",\n        margin: \"10px\",\n        padding: \"10px\",\n        width: \"150px\",\n        borderRadius: \"10px\",\n      }}\n      onClick={() => history.push(`/${id}`)}\n    >\n      <h3>Task:</h3>\n      <h5>{title}</h5>\n      <h6>{`Completed: ${completed}`}</h6>\n    </div>\n  );\n};\n\nexport default TodoCard;\n","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport TodoCard from \"./TodoCard\";\n\nconst AllTodos = () => {\n  const [todos, setTodos] = useState(undefined);\n  useEffect(() => {\n    axios.get(`https://jsonplaceholder.typicode.com/todos`).then((res) => {\n      const responseTodos = res.data;\n      setTodos(responseTodos);\n    });\n  }, []);\n  useEffect(() => console.log(todos), [todos]);\n\n  return !todos ? (\n    <CircularProgress></CircularProgress>\n  ) : (\n    <div className=\"todoList\">\n      <h1>Todo List-- All</h1>\n      <div\n        className=\"cardContainer\"\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent:\"center\"\n        }}\n      >\n        {todos.map((todo) => (\n          <TodoCard todo={todo} key = {todo.id} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AllTodos;\n","import { useParams } from \"react-router\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst Todo = () => {\n  const { id } = useParams();\n  const [task, setTask] = useState(undefined);\n  const { title, completed } = task || {};\n  useEffect(() => {\n    axios\n      .get(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then((res) => {\n        const response = res.data;\n        setTask(response);\n      });\n  }, [id]);\n\n  useEffect(() => {\n    console.log(task);\n  }, [task]);\n\n  return !task ? (\n    <CircularProgress />\n  ) : (\n    <div\n      style={ \n        \n        !completed\n          ? { color: \"red\", backgroundColor: \"gray\" }\n          : { color: \"green\", backgroundColor: \"lightGray\" }\n      }\n    >\n      <h1>\n        The task \"{title}\" has {!completed ? \"NOT\" : \"\"} been completed\n      </h1>\n    </div>\n  );\n};\n\nexport default Todo;\n","import \"./App.css\";\nimport AllTodos from \"./Components/AllTodos\";\nimport Todo from \"./Components/Todo\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path =\"/\" children = {<AllTodos/>}></Route>\n          <Route path =\"/:id\" children = {<Todo/>}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}